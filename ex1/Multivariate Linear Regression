{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#import libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Size  Bedrooms   Price\n",
      "0  2104         3  399900\n",
      "1  1600         3  329900\n",
      "2  2400         3  369000\n",
      "3  1416         2  232000\n",
      "4  3000         4  539900\n"
     ]
    }
   ],
   "source": [
    "#load the data\n",
    "file = 'ex1data2.txt'\n",
    "data = pd.read_csv(file, header = None, names = ['Size','Bedrooms','Price'])\n",
    "print(data.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       Size  Bedrooms     Price\n",
      "0  0.130010 -0.223675  0.475747\n",
      "1 -0.504190 -0.223675 -0.084074\n",
      "2  0.502476 -0.223675  0.228626\n",
      "3 -0.735723 -1.537767 -0.867025\n",
      "4  1.257476  1.090417  1.595389\n"
     ]
    }
   ],
   "source": [
    "#Scale is varrying\n",
    "#Normalizing the data\n",
    "data = (data- data.mean())/data.std()\n",
    "print(data.head())\n",
    "\n",
    "#Inserting Ones as bias in data\n",
    "data.insert(0, 'Ones', 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Assigning X, y and theta\n",
    "cols = data.shape[1]\n",
    "X = data.iloc[:,0: cols -1]\n",
    "y = data.iloc[:, cols-1:cols]\n",
    "\n",
    "#Converting X, y and theta into matrices\n",
    "X = np.matrix(X.values)\n",
    "y = np.matrix(y.values)\n",
    "theta = np.matrix(np.zeros(cols-1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#defining cost function\n",
    "cost_hist = []\n",
    "def computeCost(X, y, theta):\n",
    "    J = np.power(((X*theta.T)-y),2)\n",
    "    return np.sum(J)/(2*len(X))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Gradient descent equation\n",
    "def gradientDescent(X, y, theta, alpha, iters):\n",
    "    for i in range(iters):\n",
    "        error = (X*theta.T) - y\n",
    "        grad = np.multiply(error, X)\n",
    "        grad_cost = np.mean(grad, axis = 0)\n",
    "        theta = theta - alpha*grad_cost\n",
    "        cost = computeCost(X, y, theta)\n",
    "        if i % 100 == 0:\n",
    "            print(\"iter: \"+str(i) + \" cost: \"+str(cost))\n",
    "        cost_hist.append(cost)\n",
    "    return theta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "alpha = 0.01\n",
    "iters = 1000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "iter: 0 cost: 0.480549104108\n",
      "iter: 100 cost: 0.182094438013\n",
      "iter: 200 cost: 0.147938249574\n",
      "iter: 300 cost: 0.137759134505\n",
      "iter: 400 cost: 0.133660377725\n",
      "iter: 500 cost: 0.131940465295\n",
      "iter: 600 cost: 0.131215403524\n",
      "iter: 700 cost: 0.130909584487\n",
      "iter: 800 cost: 0.130780587916\n",
      "iter: 900 cost: 0.130726175946\n",
      "final_theta = [[ -1.10856950e-16   8.78503652e-01  -4.69166570e-02]] \n",
      "final_cost = 0.130703369608\n"
     ]
    }
   ],
   "source": [
    "#final calculation and output\n",
    "final_theta = gradientDescent(X, y, theta, alpha, iters)\n",
    "final_cost = computeCost(X, y, final_theta)\n",
    "print ('final_theta = '+str(final_theta),'\\n'+'final_cost = '+ str(final_cost))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nbE4mZmZWtv8Bkb+2pLXrw00AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f841db843c8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Visualize error vs iterations\n",
    "plt.plot(np.arange(iters), cost_hist)\n",
    "plt.xlabel('Iterations')\n",
    "plt.ylabel('Error')\n",
    "plt.title('Error vs Iterations')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
